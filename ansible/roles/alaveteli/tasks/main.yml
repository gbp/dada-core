---
# Setup alaveteli and dependencies

# Setup based on https://alaveteli.org/docs/installing/manual_install/

# - name: Set hostname
# become: yes
# hostname:
# name: "{{ server_name }}"

- name: Preserve hostname across reboots
  become: yes
  lineinfile:
    path: /etc/hostname
    regexp: '.*'
    create: yes
    line: "{{ server_name }}"
    owner: root
    group: root
    mode: 644

- name: Set mailname
  become: yes
  lineinfile:
    path: /etc/mailname
    regexp: '.*'
    create: yes
    line: "{{ site_domain }}"
    owner: root
    group: root
    mode: 644

- name: Setup /etc/hosts
  become: yes
  template:
    src: etc_hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: 644

- name: Create alaveteli user
  become: yes
  user:
    name: alaveteli
    comment: Alaveteli
    groups: adm
    password_lock: yes

- name: Create directory for alaveteli source (1/2)
  become: yes
  file:
    path: /var/www
    owner: alaveteli
    group: alaveteli
    state: directory

- name: Create directory for alaveteli source (2/2)
  become: yes
  file:
    path: "{{ alaveteli_path }}"
    owner: alaveteli
    group: alaveteli
    state: directory

- name: Add key for passenger apt repository
  become: yes
  apt_key:
    keyserver: keyserver.ubuntu.com
    state: present
    id: 561F9B9CAC40B2F7

- name: Add passenger apt repository
  become: yes
  apt_repository:
    repo: deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main
    state: present
    filename: passenger

- name: Add letsencrypt PPA
  become: yes
  apt_repository:
    repo: ppa:certbot/certbot

- name: Apt update and upgrade
  become: yes
  apt:
    update_cache: yes
    upgrade: safe

- name: Install apt packages needed by Alaveteli
  become: yes
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      # list copied from alaveteli/config/packages
    - build-essential
    - bundler
    - catdoc
    - certbot
    - dirmngr
    - elinks
    - exim4
    - geoip-database
    - gettext
    - ghostscript
    - git
    - gnupg
    - gnuplot-nox
    - imagemagick
    - irb
    - libicu-dev
    - libmagic-dev
    - libmagickwand-dev
    - libpq-dev
    - libsqlite3-dev
    - libxml2-dev
    - libxslt1-dev
    - links
    - lockfile-progs
    - memcached
    - mutt
    - nginx-extras
    - passenger
    - pdftk
    - poppler-utils
    - python3-certbot-nginx
    - python3-pip
    - python3-psycopg2
    - python3-setuptools
    - python3-yaml
    - rake
    - rdoc
    - ruby
    - ruby-dev
    - sqlite3
    - tnef
    - ttf-bitstream-vera
    - unrtf
    - unzip
    - uuid-dev
    - wkhtmltopdf
    - wv
    - xapian-tools

- name: Clone alaveteli repository
  become: yes
  become_user: alaveteli
  git:
    repo: "{{ alaveteli_repo }}"
    dest: "{{ alaveteli_path }}"
    version: "{{ alaveteli_commit }}"
    depth: 1
    force: yes
    recursive: yes

- name: Create log directory for alaveteli
  become: yes
  file:
    path: "{{ alaveteli_path }}/log"
    owner: alaveteli
    group: alaveteli
    state: directory
    mode: 0775

- name: Ensure access to log file for alaveteli
  become: yes
  file:
    path: "{{ alaveteli_path }}/log/production.log"
    owner: alaveteli
    group: alaveteli
    state: touch
    mode: 0664

- name: Upgrade pip to latest version
  become: yes
  pip:
    name: pip
    state: latest

- name: Install transifex CLI
  become: yes
  pip:
    name: transifex-client
    state: latest

#
# DATABASE / POSTGRESQL
#
# based on https://alaveteli.org/docs/installing/manual_install/#configure-database

- name: Create template database
  become: yes
  become_user: postgres
  postgresql_db:
    name: template_utf8
    encoding: "UTF-8"
    template: template0

- name: Mark template_utf8 as template DB
  shell: psql -c "update pg_database set datistemplate=true where datname='template_utf8';"
  become: yes
  become_user: postgres

- name: Create alaveteli databases
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ item }}"
    owner: "{{ db_user_name }}"
    template: template_utf8
  loop:
    - "{{ db_name_test }}"
    - "{{ db_name_production }}"

#
# EMAIL / MTA / EXIM
#

- name: Create raw emails folder
  become: yes
  file:
    path: "{{ alaveteli_path }}/{{ raw_emails_location }}"
    owner: alaveteli
    group: alaveteli
    state: directory
    mode: 0775

- name: Set Exim to receive email from other servers
  become: yes
  template:
    src: exim_update-exim4.conf.conf.j2
    dest: /etc/exim4/update-exim4.conf.conf

- name: Setup exim variables
  become: yes
  template:
    src: exim_04_alaveteli_options.j2
    dest: /etc/exim4/conf.d/main/04_alaveteli_options

- name: Add alaveteli to exim trusted users
  become: yes
  lineinfile:
    path: /etc/exim4/conf.d/main/02_exim4-config_options
    regexp: '^MAIN_TRUSTED_USERS = uucp'
    line: 'MAIN_TRUSTED_USERS = uucp : alaveteli'

- name: Create backupfoi user
  become: yes
  user:
    name: backupfoi
    comment: Alaveteli mail backup
    password_lock: yes

- name: Set Exim router to pipe incoming emails to alaveteli
  become: yes
  template:
    src: exim_router_04_alaveteli.j2
    dest: /etc/exim4/conf.d/router/04_alaveteli

- name: Set Exim transport to pipe incoming emails to alaveteli
  become: yes
  template:
    src: exim_transport_04_alaveteli.j2
    dest: /etc/exim4/conf.d/transport/04_alaveteli

- name: Create exim aliases for the router
  become: yes
  template:
    src: exim_config_aliases.j2
    dest: "{{ alaveteli_path }}/config/aliases"
    owner: alaveteli
    group: alaveteli

- name: Update exim config
  shell: /usr/sbin/update-exim4.conf
  become: yes

- name: Restart exim
  become: yes
  service:
    name: exim4
    state: restarted

#
# Configure alaveteli
#

- name: Copy config/general
  become: yes
  template:
    src: config_general.yml
    dest: "{{ alaveteli_path }}/config/general.yml"
    owner: alaveteli
    group: alaveteli

- name: Copy config/database
  become: yes
  template:
    src: config_database.yml
    dest: "{{ alaveteli_path }}/config/database.yml"
    owner: alaveteli
    group: alaveteli

- name: Copy config/routes
  become: yes
  template:
    src: config_routes.rb
    dest: "{{ alaveteli_path }}/config/routes.rb"
    owner: alaveteli
    group: alaveteli

- name: Copy config/newrelic
  become: yes
  template:
    src: config_newrelic.yml
    dest: "{{ alaveteli_path }}/config/newrelic.yml"
    owner: alaveteli
    group: alaveteli

- name: Download latest translations
  become: yes
  become_user: alaveteli
  shell: tx pull -l fr_FR
  args:
    chdir: "{{ alaveteli_path }}"
  environment:
    TX_TOKEN: "{{ transifex_token }}"

- name: Run rails-post-deploy
  shell: "{{ alaveteli_path }}/script/rails-post-deploy"
  become: yes
  become_user: alaveteli
  environment:
    RAILS_ENV: production

- name: Rebuild xapian search index
  shell: "{{ alaveteli_path }}/script/update-xapian-index"
  become: yes
  become_user: alaveteli
  environment:
    RAILS_ENV: production

# ansible is likely to fail here on the first run, because no certificate exists yet
# to fix this, ssh into the server, and run
# $ sudo certbot certonly --standalone
# this will ask a couple of questions (domain name and owner's email)
# and setup certificates for you
# then logout and rerun the ansible job (by rerunning the travis job, it should be fine then)

# NGINX / WEB SERVER

- name: Setup nginx main config
  become: yes
  template:
    src: nginx_main.conf.j2
    dest: /etc/nginx/nginx.conf

- name: Setup nginx site config
  become: yes
  template:
    src: nginx_alaveteli.conf.j2
    dest: /etc/nginx/sites-available/alaveteli.conf

- name: Make the site live
  become: yes
  file:
    src: /etc/nginx/sites-available/alaveteli.conf
    dest: /etc/nginx/sites-enabled/alaveteli.conf
    state: link

- name: Create application daemon
  become: yes
  template:
    src: daemon_alaveteli.j2
    dest: /etc/init.d/alaveteli
    owner: root
    group: alaveteli
    mode: 754

- name: Disable bot indexing of the site
  # This should only run on the staging site
  become: yes
  when: do_not_crawl
  template:
    src: robots.txt.j2
    dest: "{{ alaveteli_path }}/public/robots.txt"
    owner: alaveteli
    group: alaveteli
    mode: 644

- name: Restart nginx
  # this also restarts the rails app through passenger
  # see https://www.phusionpassenger.com/library/admin/nginx/restart_app.html#restarting-nginx
  become: yes
  service:
    name: nginx
    state: restarted
